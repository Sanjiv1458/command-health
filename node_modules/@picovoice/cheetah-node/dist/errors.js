//
// Copyright 2022 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.CheetahActivationRefused = exports.CheetahActivationThrottled = exports.CheetahActivationLimitReached = exports.CheetahActivationError = exports.CheetahRuntimeError = exports.CheetahInvalidStateError = exports.CheetahKeyError = exports.CheetahStopIterationError = exports.CheetahInvalidArgumentError = exports.CheetahIoError = exports.CheetahOutOfMemoryError = exports.CheetahError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class CheetahError extends Error {
}
exports.CheetahError = CheetahError;
class CheetahOutOfMemoryError extends CheetahError {
}
exports.CheetahOutOfMemoryError = CheetahOutOfMemoryError;
class CheetahIoError extends CheetahError {
}
exports.CheetahIoError = CheetahIoError;
class CheetahInvalidArgumentError extends CheetahError {
}
exports.CheetahInvalidArgumentError = CheetahInvalidArgumentError;
class CheetahStopIterationError extends CheetahError {
}
exports.CheetahStopIterationError = CheetahStopIterationError;
class CheetahKeyError extends CheetahError {
}
exports.CheetahKeyError = CheetahKeyError;
class CheetahInvalidStateError extends CheetahError {
}
exports.CheetahInvalidStateError = CheetahInvalidStateError;
class CheetahRuntimeError extends CheetahError {
}
exports.CheetahRuntimeError = CheetahRuntimeError;
class CheetahActivationError extends CheetahError {
}
exports.CheetahActivationError = CheetahActivationError;
class CheetahActivationLimitReached extends CheetahError {
}
exports.CheetahActivationLimitReached = CheetahActivationLimitReached;
class CheetahActivationThrottled extends CheetahError {
}
exports.CheetahActivationThrottled = CheetahActivationThrottled;
class CheetahActivationRefused extends CheetahError {
}
exports.CheetahActivationRefused = CheetahActivationRefused;
function pvStatusToException(pvStatus, errorMessage) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new CheetahOutOfMemoryError(errorMessage);
        case pv_status_t_1.default.IO_ERROR:
            throw new CheetahIoError(errorMessage);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new CheetahInvalidArgumentError(errorMessage);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new CheetahStopIterationError(errorMessage);
        case pv_status_t_1.default.KEY_ERROR:
            throw new CheetahKeyError(errorMessage);
        case pv_status_t_1.default.INVALID_STATE:
            throw new CheetahInvalidStateError(errorMessage);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new CheetahRuntimeError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new CheetahActivationError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new CheetahActivationLimitReached(errorMessage);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new CheetahActivationThrottled(errorMessage);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new CheetahActivationRefused(errorMessage);
        default:
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new CheetahError(errorMessage);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map